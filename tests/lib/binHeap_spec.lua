require("busted.runner")()
local mod = require("lib.binHeap")


local function testHeapClass(cls)
    it("insert all then pop all", function()
        local h = cls()
        h:insert(5, "five")
        h:insert(10, "ten")
        h:insert(3, "three")
        h:insert(28, "twenty eight")
        h:insert(7, "seven")
        h:insert(2, "two")

        assert.are_same({2, "two"}, {h:pop()})
        assert.are_same({3, "three"}, {h:pop()})
        assert.are_same({5, "five"}, {h:pop()})
        assert.are_same({7, "seven"}, {h:pop()})
        assert.are_same({10, "ten"}, {h:pop()})
        assert.are_same({28, "twenty eight"}, {h:pop()})

        assert.is_nil(h:pop())
        assert.is_nil(h:pop())
        assert.is_nil(h:pop())
    end)
    it("interchanging inserts and pops", function()
        local h = cls()
        h:insert(5, "five")
        h:insert(7, "seven")
        assert.are_same({5, "five"}, {h:pop()})
        h:insert(2, "two")
        h:insert(8, "eight")
        assert.are_same({2, "two"}, {h:pop()})
        assert.are_same({7, "seven"}, {h:pop()})
        h:insert(3, "three")
        assert.are_same({3, "three"}, {h:pop()})
        assert.are_same({8, "eight"}, {h:pop()})
        assert.is_nil(h:pop())
    end)
    it("same priority", function()
        local h = cls()
        h:insert(3, "a")
        h:insert(3, "b")
        h:insert(3, "c")
        h:insert(4, "four")

        assert.is_equal(3, h:pop())
        assert.is_equal(3, h:pop())
        assert.is_equal(3, h:pop())
        assert.is_equal(4, h:pop())
    end)
end


describe("BinaryHeap", function()
    testHeapClass(mod.BinaryHeap)
end)


describe("TrackingBinaryHeap", function()
    testHeapClass(mod.TrackingBinaryHeap)
    it("can decrease", function()
        local h = mod.TrackingBinaryHeap()
        h:insert(7, "apple")
        h:insert(3, "banana")
        assert.are_same({3, "banana"}, {h:tip()})

        h:decrease("apple", 2)
        assert.are_same({2, "apple"}, {h:tip()})

        assert.are_same({2, "apple"}, {h:pop()})
        assert.are_same({3, "banana"}, {h:pop()})
        assert.is_nil(h:pop())
    end)
end)
