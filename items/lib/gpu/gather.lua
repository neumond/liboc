local testFuncs = require("lib.gpu.consTests")
local colorMod = require("lib.gpu.color")
local BASE_PATH = "lib/gpu/"


-- Gather fixtures for consistency with real GPU


local function getGpuRegion(gpu, w, h)
    local textBuf, fgBuf, bgBuf = {}, {}, {}
    for y=1,h do
        textBuf[y] = {}
        fgBuf[y] = {}
        bgBuf[y] = {}
        for x=1,w do
            local char, fc, bc, fpal, bpal = gpu.get(x, y)
            textBuf[y][x] = char
            fgBuf[y][x] = fpal ~= nil and colorMod.packColor(fpal, true) or colorMod.packColor(fc, false)
            bgBuf[y][x] = bpal ~= nil and colorMod.packColor(bpal, true) or colorMod.packColor(bc, false)
        end
    end
    return textBuf, fgBuf, bgBuf
end


local function getGpuResult(gpu, testFunc)
    local w, h = gpu.getResolution()
    gpu.setForeground(0xFFFFFF)
    gpu.setBackground(0x000000)
    gpu.fill(1, 1, w, h, " ")
    return getGpuRegion(gpu, testFunc(gpu))
end


local function writeToModule(fname, data, command)
    local f = assert(io.open(BASE_PATH .. fname, "w"))
    f:write("-- this file is autogenerated\n")
    f:write("-- do not modify\n")
    f:write("-- regenerate with command\n")
    f:write("-- " .. command .. "\n")
    f:write("\n")
    f:write("return ")
    f:write(require("serialization").serialize(data, false))
    f:close()
end


local function gatherGpuResults()
    local gpu = require("component").gpu
    local r = {}
    for k, func in pairs(testFuncs) do
        r[k] = {getGpuResult(gpu, func)}
    end
    writeToModule(
        "gpuResult_auto.lua", r,
        "require(\"lib.gpu.gather\").gatherGpuResults()")
end


local function gatherGpuPalette()
    local gpu = require("component").gpu
    local r = {}
    for i=0,15 do
        r[i] = gpu.getPaletteColor(i)
    end
    writeToModule(
        "gpuPalette_auto.lua", r,
        "require(\"lib.gpu.gather\").gatherGpuPalette()"
    )
end


return {
    getGpuResult=getGpuResult,
    gatherGpuResults=gatherGpuResults,
    gatherGpuPalette=gatherGpuPalette
}
